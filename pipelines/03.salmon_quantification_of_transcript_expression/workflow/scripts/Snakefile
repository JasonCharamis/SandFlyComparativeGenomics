import os
import re
import subprocess
import itertools

samples_file = config['samples_file']
samples_dict = {}

fasta = config['fasta']

with open(samples_file) as f:
    first_line = True

    for line in f:
        if first_line: # Skip header line
            continue
        
        columns = line.strip().split("\t")

        if len(columns) != 4:
            raise ValueError("Invalid sample list format. Sample list should be of format: group_name\tsample_name\tfastq_filename1\tfastq_filename2")
        
        group = columns[0]
        sample = columns[1]
        filename1 = columns[2]
        filename2 = columns[3]

        # Check if sample name already exists in the dictionary, if not, add it
        if sample not in samples_dict:
            samples_dict[sample] = {'group': group, 'filename1': filename1, 'filename2': filename2}

            with open ( 'samples.list', "w" ) as file: # Write sample.list file
                print ( f"{sample}\t{group}", file=file )
        else:
            pass


# Create wildcards for group and sample names
groups = list(set(sample_info['group'] for sample_info in samples_dict.values()))
samples = [sample_info for sample_info in samples_dict.keys()]


## ====================================================== ANALYSIS ====================================================== ##

rule all:
    input:
        expand ("{group}.tpm.tsv", group = groups ),
        expand ("{group}.counts.txt", group = groups )
    
rule index:
    input: {fasta}
    output: directory("{fasta}.salmon.index")
    conda: "envs/salmon.yaml"
    shell: """ salmon index -t {input.fasta} -i {output} --keepDuplicates """

    
rule selective_alignment:
    input: fastq1 = "{samples}_1.trimmed.fastq.gz",
           fastq2 ="{samples}_2.trimmed.fastq.gz"
    output: directory("{samples}.salmon.quants")
    conda: "envs/salmon.yaml"
    threads: config['mapping_threads']
    shell: """ salmon quant -i {groups}.salmon.index \
    	       	      	    -l A -1 {input.fastq1} -2 {input.fastq2} \
			    --threads {threads} \
			    --validateMappings \
			    -o {output} """
    
rule quantmerge:
    input: expand("{sample}/quant.sf", sample=samples)
    output: counts = "{groups}.counts.txt",
            tpm = "{groups}.tpm.tsv"
    params: groups = 

    conda: "envs/salmon.yaml"
    message: "Merging counts and TPM values per sample"
    shell: """ salmon quantmerge --quants {input} \
                                 --column numreads \
                                 --output {output.counts} && \
    
               salmon quantmerge --quants {input} \
                                 --column TPM \
                                 --output {output.tpm} """
