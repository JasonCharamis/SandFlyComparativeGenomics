
import os
import re
import subprocess
from collections import defaultdict

# Get the absolute workflow path
def get_workflow_path(start_dir="."):
    result = subprocess.run(["find", start_dir, "-name", "Snakefile*"], stdout=subprocess.PIPE, stderr=subprocess.PIPE) # Locate workflow_dir using Snakefile   
    stdout_str = result.stdout.decode("utf-8").strip() # Decode stdout into a string

    if not stdout_str:
        return None

    workflow_dir = re.sub(r"/workflow/.*", "", stdout_str)
    return os.path.abspath(workflow_dir)


# Generate Trinity samples file
def generate_trinity_samples_file(samples, data_dir):
    species = defaultdict(list)

    for sample in samples:
        line = f"{sample}\t{os.path.join(data_dir, f'{sample}_1.fastq.gz')}\t{os.path.join(data_dir, f'{sample}_2.fastq.gz')}"
        species[sample[:-1]].append(line)

    for sp, lines in species.items():
        with open(f'{sp}.samples', 'w') as outfile:
            outfile.write("\n".join(sorted(set(lines))))

            
# Define variables
workflow_dir = get_workflow_path(start_dir = ".")
configfile: f"{workflow_dir}/config/config.yaml"
data_directory = config['data_directory']
samples = [str(file) for file in sorted([f[:-11] for f in os.listdir(data_directory) if f.endswith('.fastq.gz')])]
generate_trinity_samples_file(samples, data_directory)
species = samples[:-3]


#============================================================== PIPELINE ============================================================#

rule all:
     input:
         expand('evigene/trinity_unfiltered_spadeshard/okayset/{species}.trinityunfiltered.spadeshard.okay.tr', species = species ),
         expand('{species}.trinityunfiltered.spadeshard.okay.tr.transdecoder.pep', species = species )

rule make_dir:
     output: directory('{species}')
     shell: 'mkdir {species}'
                    
rule trinity:
     input: species_dir = rules.make_dir.output, 
            species_samples = '{species}.samples'
     output: trinity_fasta = '{species}/trinity_out_dir/trinity_out_dir.Trinity.fasta'

     conda: "envs/envs.yaml"
     threads: config['trinity_threads']
     shell: """ cd {species}" && \
                trinity \
     	    	--seqType fq \
                --SS_lib_type RF \
                --max_memory 350G \
                --samples_file {input.species_samples} \
                --CPU {threads} \
                --trimmomatic """
     
rule rnaspades:
     input: '{species}/trinity_out_dir/trinity_out_dir.Trinity.fasta'                      
     output: '{species}_spadesrna_outdir/hard_filtered_transcripts.fasta'
     
     conda: "envs/envs.yaml"
     threads: config['rnaspades_threads']
     shell: """ cat {species}/trinity_out_dir/*_1.fastq.gz.PwU.qtrim.fq > {species}_1.all.trimmed.fastq && \
       	    	cat {species}/trinity_out_dir/*_2.fastq.gz.PwU.qtrim.fq > {species}_2.all.trimmed.fastq && \

                rnaspades.py --ss rf  \
                             -1 {species}_1.all.trimmed.fastq  \
                             -2 {species}_2.all.trimmed.fastq  \
                             --checkpoints all  \
                             --threads {threads}  \
                             -o {species}_spadesrna_outdir """

rule evigene:
     input:
         trinity_transcripts = '{species}/trinity_out_dir/trinity_out_dir.Trinity.fasta',
         spades_hard_filtered ='{species}_spadesrna_outdir/hard_filtered_transcripts.fasta'
     output:
         okay_transcripts= 'evigene/trinity_unfiltered_spadeshard/okayset/{species}.trinityunfiltered.spadeshard.okay.tr'

     conda: "envs/envs.yaml"
     threads: config['evigene_threads']
     shell: """ cat {input.trinity_transcripts} {input.spades_hard_filtered} > {species}.trinityunfiltered.spadeshard.fasta && \

                perl ~/miniconda3/opt/evigene-23.7.15/scripts/prot/tr2aacds.pl -cdnaseq {species}.trinityunfiltered.spadeshard.fasta \
                                                                               -NCPU {threads} \
                                                                               -logfile """
     
                      
rule gene_prediction:
     input: evigene_assembly = 'evigene/trinity_unfiltered_spadeshard/okayset/{species}.trinityunfiltered.spadeshard.okay.tr',
            swissprot_Metazoa_dmnd = config['swissprot_Metazoa_dmnd']
     
     output: transdecoder_prediction = '{species}.trinityunfiltered.spadeshard.okay.tr.transdecoder.pep'

     conda: "envs/envs.yaml"
     shell: """ cd {species} && \

                TransDecoder.LongOrfs -t ../{input.evigene_assembly} && \

                diamond blastp --query trinityunfiltered.spadeshard.okay.tr.transdecoder_dir/longest_orfs.pep \
                               --db {input.swissprot_Metazoa_dmnd} \
                               --outfmt 6 --out {species}.longest_orfs.trinityunfiltered.spadeshard.okay.transdecoder.pep.vs.uniref50.fmt6 --more-sensitive --threads 20 && \

                hmmsearch --cpu 30 \
                          --domtblout {species}.longest.orfs.pfam.domtblout Pfam-A.hmm trinityunfiltered.spadeshard.okay.tr.transdecoder_dir/longest_orfs.pep && \
     
                TransDecoder.Predict -t {input.evigene_assembly} \
                                     --retain_pfam_hits {species}.longest.orfs.pfam.domtblout \
                                     --retain_blastp_hits {species}.longest_orfs.trinityunfiltered.spadeshard.okay.transdecoder.pep.vs.uniref50.fmt6 """


rule cdhit_clustering:
     input: unfiltered_proteome = '{species}.trinityunfiltered.spadeshard.okay.tr.transdecoder.pep'
     output: filtered_proteome = '{species}.pep.fasta'
     conda: "envs/envs.yaml"
     threads: config['cdhit_threads']
     params: cd_hit_cutoff = config['cd_hit_cutoff']
     message: "Filtering {input.unfiltered_proteome} with CD-HIT at {params.cd_hit_cutoff} cutoff"
      
     shell: """ cd-hit -i {input.unfiltered_proteome} \
                       -c {params.cd_hit_cutoff} \
                       -o {output.filtered_proteome} \
                       -T {threads} """
